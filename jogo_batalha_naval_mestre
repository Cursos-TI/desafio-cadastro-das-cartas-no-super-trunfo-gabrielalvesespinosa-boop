#include <stdio.h>

#define TAM 10
#define NAVIO 3
#define HABILIDADE 5
#define AREA 5  // valor que representa área afetada

// Função para inicializar o tabuleiro
void inicializar_tabuleiro(int tabuleiro[TAM][TAM]) {
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            tabuleiro[i][j] = 0;
        }
    }
}

// Posiciona um navio no tabuleiro
void posicionar_navio(int tabuleiro[TAM][TAM], int linha, int coluna, char orientacao) {
    for (int i = 0; i < 3; i++) {
        if (orientacao == 'H') tabuleiro[linha][coluna + i] = NAVIO;
        else if (orientacao == 'V') tabuleiro[linha + i][coluna] = NAVIO;
        else if (orientacao == 'D') tabuleiro[linha + i][coluna + i] = NAVIO;
        else if (orientacao == 'E') tabuleiro[linha + i][coluna - i] = NAVIO;
    }
}

// Função para criar matriz Cone
void criar_cone(int cone[HABILIDADE][HABILIDADE]) {
    for (int i = 0; i < HABILIDADE; i++) {
        for (int j = 0; j < HABILIDADE; j++) {
            if (j >= HABILIDADE / 2 - i && j <= HABILIDADE / 2 + i) {
                cone[i][j] = 1;
            } else {
                cone[i][j] = 0;
            }
        }
    }
}

// Função para criar matriz Cruz
void criar_cruz(int cruz[HABILIDADE][HABILIDADE]) {
    for (int i = 0; i < HABILIDADE; i++) {
        for (int j = 0; j < HABILIDADE; j++) {
            if (i == HABILIDADE / 2 || j == HABILIDADE / 2) {
                cruz[i][j] = 1;
            } else {
                cruz[i][j] = 0;
            }
        }
    }
}

// Função para criar matriz Octaedro
void criar_octaedro(int octa[HABILIDADE][HABILIDADE]) {
    for (int i = 0; i < HABILIDADE; i++) {
        for (int j = 0; j < HABILIDADE; j++) {
            if (abs(i - HABILIDADE / 2) + abs(j - HABILIDADE / 2) <= HABILIDADE / 2) {
                octa[i][j] = 1;
            } else {
                octa[i][j] = 0;
            }
        }
    }
}

// Aplica a matriz de habilidade no tabuleiro
void aplicar_habilidade(int tabuleiro[TAM][TAM], int habilidade[HABILIDADE][HABILIDADE], int origem_linha, int origem_coluna) {
    for (int i = 0; i < HABILIDADE; i++) {
        for (int j = 0; j < HABILIDADE; j++) {
            int linha = origem_linha - HABILIDADE / 2 + i;
            int coluna = origem_coluna - HABILIDADE / 2 + j;

            // Verifica se está dentro dos limites
            if (linha >= 0 && linha < TAM && coluna >= 0 && coluna < TAM) {
                if (habilidade[i][j] == 1 && tabuleiro[linha][coluna] == 0) {
                    tabuleiro[linha][coluna] = AREA;
                }
            }
        }
    }
}

// Função para imprimir o tabuleiro
void imprimir_tabuleiro(int tabuleiro[TAM][TAM]) {
    printf("\nTabuleiro:\n   ");
    for (int j = 0; j < TAM; j++) printf("%d ", j);
    printf("\n");

    for (int i = 0; i < TAM; i++) {
        printf("%2d ", i);
        for (int j = 0; j < TAM; j++) {
            if (tabuleiro[i][j] == 0) printf("~ ");       // Água
            else if (tabuleiro[i][j] == NAVIO) printf("# ");  // Navio
            else if (tabuleiro[i][j] == AREA) printf("* ");   // Habilidade
        }
        printf("\n");
    }
}

int main() {
    int tabuleiro[TAM][TAM];
    int cone[HABILIDADE][HABILIDADE];
    int cruz[HABILIDADE][HABILIDADE];
    int octaedro[HABILIDADE][HABILIDADE];

    inicializar_tabuleiro(tabuleiro);

    // Posiciona navios fixos
    posicionar_navio(tabuleiro, 0, 0, 'H');     // Horizontal
    posicionar_navio(tabuleiro, 2, 5, 'V');     // Vertical
    posicionar_navio(tabuleiro, 5, 5, 'D');     // Diagonal principal
    posicionar_navio(tabuleiro, 3, 7, 'E');     // Diagonal secundária

    // Cria matrizes de habilidade
    criar_cone(cone);
    criar_cruz(cruz);
    criar_octaedro(octaedro);

    // Define pontos de origem para aplicar as habilidades
    aplicar_habilidade(tabuleiro, cone, 2, 2);         // Cone no topo esquerdo
    aplicar_habilidade(tabuleiro, cruz, 5, 5);         // Cruz no centro
    aplicar_habilidade(tabuleiro, octaedro, 7, 7);     // Octaedro mais ao canto

    // Exibe o tabuleiro
    imprimir_tabuleiro(tabuleiro);

    return 0;
}
